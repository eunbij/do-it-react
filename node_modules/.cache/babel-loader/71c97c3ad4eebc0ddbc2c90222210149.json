{"ast":null,"code":"var _jsxFileName = \"/Users/eunbi/Documents/ebgit/do-it-react/src/03/StateExample.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StateExample extends React.Component {\n  constructor(props) {\n    super(props); // state 정의\n\n    this.state = {\n      //1. 컴포넌트에서 관리하려는 변수 state 초깃값을 this.state에 객체 형태로 정의\n      loading: true,\n      formData: \"no data\"\n    }; // 이후 콜백 함수를 다룰 때 bind(this) 추가 학습 예정\n    // 2. 함수로 넘어갈 this는 반드시 생성자에서 bind()로 묶어주어야 함 (3-9에서 학습 예정)\n\n    this.handleData = this.handleData.bind(this); // 3. setTimeout() 함수를 사용하여 4초 후에 handleData() 함수를 호출\n\n    setTimeout(this.handleData, 4000);\n  }\n\n  handleData() {\n    const data = \"new data\"; // 4. 컴포넌트 특수 변수 this.state를 사용하여 state값에 접근\n\n    const {\n      formData\n    } = this.state; //state 변경\n\n    this.setState({\n      // 5. 컴포넌트의 내장 함수 this.setState()를 사용하여 state값을 변경\n      loading: false,\n      formData: data + formData\n    }); // this.state.loading은 현재 true\n\n    console.log(\"loading값\", this.state.loading); // 이후 호출될 render() 함수에서의 this.state.loading은 false\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uB85C\\uB529\\uC911: \", String(this.state.loading)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uACB0\\uACFC: \", this.state.formData]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StateExample;\n/* \n// 일반 함수와 화살표 함수를 setState() 함수의 인자로 전달하여 state 값을 변경\n// 일반 함수를 사용한 예\nhandleData(data) {\n    this.setState(function(prevState)) {\n        const newState = {\n            loading: false,\n            formData: data + prevState.formData,\n        };\n        return newState;\n    }\n}\n\n// 화살표 함수를 사용한 예\nhandleData(data) {\n    this.setState(prevState =>({\n        loading: false,\n        formData: data + prevState.formData\n    }));\n} \n*/","map":{"version":3,"sources":["/Users/eunbi/Documents/ebgit/do-it-react/src/03/StateExample.jsx"],"names":["React","StateExample","Component","constructor","props","state","loading","formData","handleData","bind","setTimeout","data","setState","console","log","render","String"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,KAAL,GAAa;AACX;AACAC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb,CAHiB,CAQjB;AACA;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB,CAViB,CAWjB;;AACAC,IAAAA,UAAU,CAAC,KAAKF,UAAN,EAAkB,IAAlB,CAAV;AACD;;AACDA,EAAAA,UAAU,GAAG;AACX,UAAMG,IAAI,GAAG,UAAb,CADW,CAEX;;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAe,KAAKF,KAA1B,CAHW,CAIX;;AACA,SAAKO,QAAL,CAAc;AACZ;AACAN,MAAAA,OAAO,EAAE,KAFG;AAGZC,MAAAA,QAAQ,EAAEI,IAAI,GAAGJ;AAHL,KAAd,EALW,CAUX;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKT,KAAL,CAAWC,OAAnC,EAXW,CAYX;AACD;;AACDS,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BAEE;AAAA,2CAAYC,MAAM,CAAC,KAAKX,KAAL,CAAWC,OAAZ,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,oBAEiD;AAAA;AAAA;AAAA;AAAA,cAFjD,eAGE;AAAA,qCAAW,KAAKD,KAAL,CAAWE,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AArCwC;;AAwC3C,eAAeN,YAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\n\nclass StateExample extends React.Component {\n  constructor(props) {\n    super(props);\n    // state 정의\n    this.state = {\n      //1. 컴포넌트에서 관리하려는 변수 state 초깃값을 this.state에 객체 형태로 정의\n      loading: true,\n      formData: \"no data\",\n    };\n    // 이후 콜백 함수를 다룰 때 bind(this) 추가 학습 예정\n    // 2. 함수로 넘어갈 this는 반드시 생성자에서 bind()로 묶어주어야 함 (3-9에서 학습 예정)\n    this.handleData = this.handleData.bind(this);\n    // 3. setTimeout() 함수를 사용하여 4초 후에 handleData() 함수를 호출\n    setTimeout(this.handleData, 4000);\n  }\n  handleData() {\n    const data = \"new data\";\n    // 4. 컴포넌트 특수 변수 this.state를 사용하여 state값에 접근\n    const { formData } = this.state;\n    //state 변경\n    this.setState({\n      // 5. 컴포넌트의 내장 함수 this.setState()를 사용하여 state값을 변경\n      loading: false,\n      formData: data + formData,\n    });\n    // this.state.loading은 현재 true\n    console.log(\"loading값\", this.state.loading);\n    // 이후 호출될 render() 함수에서의 this.state.loading은 false\n  }\n  render() {\n    return (\n      <div>\n        {/*state 데이터는 this.state로 접근 가능. */}\n        <span>로딩중: {String(this.state.loading)}</span> <br />\n        <span>결과: {this.state.formData}</span>\n      </div>\n    );\n  }\n}\n\nexport default StateExample;\n\n/* \n// 일반 함수와 화살표 함수를 setState() 함수의 인자로 전달하여 state 값을 변경\n// 일반 함수를 사용한 예\nhandleData(data) {\n    this.setState(function(prevState)) {\n        const newState = {\n            loading: false,\n            formData: data + prevState.formData,\n        };\n        return newState;\n    }\n}\n\n// 화살표 함수를 사용한 예\nhandleData(data) {\n    this.setState(prevState =>({\n        loading: false,\n        formData: data + prevState.formData\n    }));\n} \n*/\n"]},"metadata":{},"sourceType":"module"}