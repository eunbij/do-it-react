{"ast":null,"code":"var _jsxFileName = \"/Users/eunbi/Documents/ebgit/do-it-react/src/03/Input.jsx\";\nimport React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Input extends PureComponent {\n  // 1. 클래스형 컴포넌트의 PureComponent 형태로 작성\n  constructor(props) {\n    super(props);\n    this.setRef = this.setRef.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChage(e) {\n    const {\n      name,\n      onChange\n    } = this.props;\n\n    if (onChange) {\n      onChange(name, e.target.value);\n    }\n  }\n\n  componentDidMount() {\n    // 2. autoFocus값이 true일 경우 출력 후 input 박스에 자동으로 커서를 배치\n    if (this.props.autoFocus) {\n      this.ref.focus();\n    }\n  }\n\n  componentDidUpdate() {\n    // 3. autoFocus값이 true일 경우 출력 후 input 박스에 자동으로 커서를 배치\n    if (this.props.autoFocus) {\n      this.ref.focus();\n    }\n  }\n\n  setRef(ref) {\n    this.ref = ref;\n  }\n\n  render() {\n    const {\n      errorMessage,\n      label,\n      name,\n      value,\n      type,\n      onFocus\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [label, /*#__PURE__*/_jsxDEV(\"input\", {\n        id: `input_${name}`,\n        ref: this.setRef // 5. input 값이 변경될 때 onChange 콜백 함수를 호출\n        ,\n        onChange: this.handleChange // 6. 프로퍼티로 전달받은 콜백 함수를 DOM 이벤트 프로퍼티에 연결하여 input에 마우스 커서가 포커스될 때 상위 컴포넌트의 콜백 함수를 호출\n        ,\n        onFocus: onFocus,\n        value: value,\n        type: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nInput.propTypes = {\n  // 8. 문자열형의 값 'text', 'number', 'price' 중 하나의 값만 가질 수 있음\n  type: PropTypes.oneOf([\"text\", \"number\", \"price\"]),\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  errorMessage: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  autoFocus: PropTypes.bool\n};\nInput.defaultProps = {\n  onChage: () => {},\n  onFocus: () => {},\n  autoFocus: false,\n  // 9. type의 기본값은 'text'\n  type: \"text\"\n};\nexport default Input;","map":{"version":3,"sources":["/Users/eunbi/Documents/ebgit/do-it-react/src/03/Input.jsx"],"names":["React","PureComponent","PropTypes","Input","constructor","props","setRef","bind","handleChange","handleChage","e","name","onChange","target","value","componentDidMount","autoFocus","ref","focus","componentDidUpdate","render","errorMessage","label","type","onFocus","propTypes","oneOf","string","isRequired","oneOfType","number","func","bool","defaultProps","onChage"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Input extends PureComponent {\n  // 1. 클래스형 컴포넌트의 PureComponent 형태로 작성\n  constructor(props) {\n    super(props);\n    this.setRef = this.setRef.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChage(e) {\n    const { name, onChange } = this.props;\n    if (onChange) {\n      onChange(name, e.target.value);\n    }\n  }\n  componentDidMount() {\n    // 2. autoFocus값이 true일 경우 출력 후 input 박스에 자동으로 커서를 배치\n    if (this.props.autoFocus) {\n      this.ref.focus();\n    }\n  }\n  componentDidUpdate() {\n    // 3. autoFocus값이 true일 경우 출력 후 input 박스에 자동으로 커서를 배치\n    if (this.props.autoFocus) {\n      this.ref.focus();\n    }\n  }\n  setRef(ref) {\n    this.ref = ref;\n  }\n  render() {\n    const { errorMessage, label, name, value, type, onFocus } = this.props;\n    return (\n      <label>\n        {/* 4. label 안에 전달받은 label값을 출력 */}\n        {label}\n        <input\n          id={`input_${name}`}\n          ref={this.setRef}\n          // 5. input 값이 변경될 때 onChange 콜백 함수를 호출\n          onChange={this.handleChange}\n          // 6. 프로퍼티로 전달받은 콜백 함수를 DOM 이벤트 프로퍼티에 연결하여 input에 마우스 커서가 포커스될 때 상위 컴포넌트의 콜백 함수를 호출\n          onFocus={onFocus}\n          value={value}\n          type={type}\n        />\n        {/* 7. errorMessage가 존재할 경우 출력 */}\n        {errorMessage && <span className=\"error\">{errorMessage}</span>}\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  // 8. 문자열형의 값 'text', 'number', 'price' 중 하나의 값만 가질 수 있음\n  type: PropTypes.oneOf([\"text\", \"number\", \"price\"]),\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  errorMessage: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  autoFocus: PropTypes.bool,\n};\nInput.defaultProps = {\n  onChage: () => {},\n  onFocus: () => {},\n  autoFocus: false,\n  // 9. type의 기본값은 'text'\n  type: \"text\",\n};\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}